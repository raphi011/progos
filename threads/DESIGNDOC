			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Raphael Gruber <raphi011@gmail.com>
Fabian Brunnthaler <f.brunnthaler@gmx.net>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct thread:
    struct lock *lock_wait; 
        Points at the lock, that the current thread is waiting for
    struct list donations;
        List of all the donations the current thread got from other 
        threads
    struct list_elem don_elem;
        One Element of the donationlist (for listfunctions)
        
>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

We used the given Linkedlist, for tracking the donations. Every
Thread has one as stated above.

Thread Main: Name: Tm Priority: 31
Thread 1:    Name: T1 Priority: 30 Lock: L1
Thread 2:    Name: T2 Priority: 29 Lock L2

create Tm, T1, T2.
Tm highest priority needs Lock L1, donates to T1 (P31). 
T1 needs L2, donates to T2 (P31). T2 releases L2 (P29). T1 highest 
priority. T1 releases L2(P30). Tm highest priorty(P31).

Tm -> T1(L1) -> T2(L2)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Threads get inserted into a list sorted by their priorities (donated
priorities are also considered). In thread_yield() the first element
of the list gets on the ready list -> has highest priority

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

1) Current thread adds lock. 
2) Pushes his donation on the lock holders donation list.
3) "Waits till lock is released"

The donee's actual priority is not overwritten, instead if some thread
calls get_priority_from(thread) the recursive function 
thread_get_donated_priorities gets called and iterates of the nested
donations and returns the highest priority

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

1) The reference to the current holder of the lock is removed. 
2) All donations the current thread had received for this lock are removed.
3) Sort the waiting threads by their priority
4) Unblock highest priority thread
5) Schedule
 
---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

If some donation was made while iterating over the list of donations there 
could be a possible race condition, to prevent that we disabled interrupts.

With our implementation a lock would not work because we have to prevent another
thread from changing the various donation lists, but because locks use the 
donation lists themselves this would result in a deadlock. So for example if we
would lock all donation lists while in set_priority and then try to release that
lock it would not be possible because lock_release also needs to access the 
donations.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

A thread's priority is only set by itself, no other thread touches it. 
That way race conditions in set_priority are non existant. The drawback is
that it needs more processing time because it needs to iterate over all
donations everytime get_priority is called which can happen often, especially
when threads are sorted. But we agreed that if the donation list stays small
which it should be most of the time that disadvantage is insignificant.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Actually it was rather fine, we had to do more debugging than actual writing
though.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Semaphoren were interesting how they got implemented.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

No it was sufficient.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

Maybe leave the question: In what ways is it superior to another 
design you considered? its hard to answer espically without knowing
other designs
